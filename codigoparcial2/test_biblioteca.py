"""
Archivo de pruebas para el sistema de biblioteca.
Autor: Jos√© Hidalgo
Versi√≥n corregida 100%
"""

from sistema_biblioteca import *


def pruebas_biblioteca():
    print("=== PRUEBAS DEL SISTEMA DE BIBLIOTECA ===\n")

    biblioteca = Biblioteca()

    # --- Registro de libros ---
    print("1Ô∏è‚É£  Registrando libros...")
    try:
        biblioteca.registrar_libro("001", "Cien a√±os de soledad", "Gabriel Garc√≠a M√°rquez", 5)
        biblioteca.registrar_libro("002", "El Quijote", "Miguel de Cervantes", 3)
        biblioteca.registrar_libro("003", "La Odisea", "Homero", 2)
        print("‚úÖ Libros registrados correctamente.")
    except Exception as e:
        print(f"‚ùå Error registrando libros: {e}")

    # --- Registro de usuarios ---
    print("\n2Ô∏è‚É£  Registrando usuarios...")
    try:
        biblioteca.registrar_usuario("mario@example.com", "Mario P√©rez")
        biblioteca.registrar_usuario("laura@example.com", "Laura G√≥mez")
        print("‚úÖ Usuarios registrados correctamente.")
    except Exception as e:
        print(f"‚ùå Error registrando usuarios: {e}")

    # --- B√∫squeda de libro ---
    print("\n3Ô∏è‚É£  Buscando libro por t√≠tulo...")
    libro = biblioteca.buscar_libro_por_titulo("Cien a√±os de soledad")
    if libro:
        print(f"‚úÖ Libro encontrado: {libro}")
    else:
        print("‚ùå Libro no encontrado.")

    # --- Pr√©stamos ---
    print("\n4Ô∏è‚É£  Realizando pr√©stamos...")
    try:
        biblioteca.prestar_libro("001", "mario@example.com")
        biblioteca.prestar_libro("002", "laura@example.com")
        print("‚úÖ Pr√©stamos realizados correctamente.")
    except Exception as e:
        print(f"‚ùå Error realizando pr√©stamo: {e}")

    # --- Mostrar estado actual ---
    print("\nüìö Estado actual de los libros:")
    for libro in biblioteca.listar_libros():
        print(libro)

    # --- Devoluci√≥n de libro ---
    print("\n5Ô∏è‚É£  Devolviendo libro...")
    try:
        biblioteca.devolver_libro("001", "mario@example.com")
        print("‚úÖ Devoluci√≥n registrada correctamente.")
    except Exception as e:
        print(f"‚ùå Error al devolver libro: {e}")

    # --- Renovaci√≥n de pr√©stamo ---
    print("\n6Ô∏è‚É£  Renovando pr√©stamo...")
    try:
        biblioteca.prestar_libro("003", "mario@example.com")
        biblioteca.renovar_prestamo("003", "mario@example.com")
        print("‚úÖ Renovaci√≥n realizada correctamente.")
    except Exception as e:
        print(f"‚ùå Error al renovar pr√©stamo: {e}")

    # --- Prueba de errores ---
    print("\n7Ô∏è‚É£  Probando validaciones...")
    try:
        biblioteca.registrar_libro("001", "Duplicado", "Autor X", 1)
    except LibroDuplicado:
        print("‚úÖ Correcto: No se permite registrar un libro duplicado.")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

    try:
        biblioteca.prestar_libro("9999", "mario@example.com")
    except LibroNoEncontrado:
        print("‚úÖ Correcto: No se puede prestar un libro inexistente.")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

    try:
        biblioteca.registrar_usuario("mario@example.com", "Otro Mario")
    except UsuarioDuplicado:
        print("‚úÖ Correcto: No se permite registrar un usuario duplicado.")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

    try:
        biblioteca.renovar_prestamo("9999", "mario@example.com")
    except LibroNoEncontrado:
        print("‚úÖ Correcto: No se puede renovar un pr√©stamo inexistente.")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

    print("\n=== FIN DE PRUEBAS ===")


if __name__ == "__main__":
    pruebas_biblioteca()
